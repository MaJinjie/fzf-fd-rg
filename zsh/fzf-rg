#!/bin/env zsh

# 匹配的文件数

# 1. 能够解析常用的参数
# 2. 接受目录或文件
# 3. 能够在fzf过滤时，解释--iglob --hidden --no-hidden --no-ignore --ignore --max-depth --type subdir
# 4. In the commandline, 尽可能解释用户传入的参数
# 5. 

setopt EXTENDED_GLOB
setopt REMATCHPCRE

function print_msg () {
    local tag context tcolor ccolor

    tag=$1 context=${@:2}
    case $tag in 
        info)   tcolor=blue ccolor=magenta ;;
        warn)   tcolor=yellow ccolor=magenta ;;
        error)  tcolor=red ccolor=magenta ;;
        help)   tcolor=green ccolor=magenta ;;
        *)      print -- "$@"; exit 0 ;;
    esac
    context="%B%S%F{$tcolor}$tag%b%s%f : %F{$ccolor}$context%f"

    print -- "${(%):-$context}"    
}

function startup_fzf() {
    if [[ $1 == --popup ]] && (($+commands[fzf-tmux])); then
        fzf-tmux $FZF_TMUX_OPTS "${@:2}"
    else
        fzf "$@"
    fi
    exitcode=$?
}

__help() {
    local help_msg='\nusage: ss [OPTIONS] [pattern] [DIRECTORIES or Files]

    OPTIONS:
        -t file types,  Comma-separated
        -T file types(not),  Comma-separated
        -g iglob pattern,  Comma-separated
        
        -H bool --hidden
        -I bool --no-ignorehas 
        -d int max-depth
        -m --max-count 
        --sort format (sort|sortr):default:toggle_val
        --args pass -> rg

        --query force initial query string
        --warm warm-cache when initial querystring is empty
        --popup start fzf-tmux
        --split Explain the parameters passed in by the user as much as possible
        --alias use directory alias

        --border-lines border lines
        --root-dir filter base dir
        --style opetional: init-query, ltrim, space-trigger

        --help 
    KEYBINDINGS:
        alt-e subshell editor
        alt-enter open dirname file
        enter current open file
    '
    print_msg help "$help_msg"
    exit 0
}

__split() {
    local item
    for item in "$@"; do 
        { [[ -z $o_custom["root-dir"] && -e $item ]] || [[ -n $o_custom["root-dir"] && -e $o_custom["root-dir"]/$item ]] } && {
            [[ -n $o_custom["root-dir"] ]] && item=$o_custom/$item
            Search_paths+=$item
            [[ -d $item ]] && Search_dirs+=$item
            continue
        }
        { (($+o_custom[alias])) && [[ $item == (#b):(*): ]] } && {
            item=${${(f)"$(rualdi list-alias)"}[(r)$match[1] => *]#* => }
            [[ -n $item ]] && {
                Search_paths+=$item
                Search_dirs+=$item
            }
            continue
        }
        { (($+o_custom[split])) && [[ $item =~ '^([hHiIsSoOge\d]+)?,+((?:[^,]+)(?:,+[^,]+)*)?,*$' && -n $MATCH ]] } && {
            local idx flags=$match[1] types=$match[2]
            [[ -n $flags ]] && {
                [[ $flags =~ h ]] && o_dynamic+="--no-hidden"
                [[ $flags =~ H ]] && o_dynamic+="--hidden"
                [[ $flags =~ i ]] && o_dynamic+="--ignore"
                [[ $flags =~ I ]] && o_dynamic+="--no-ignore"
                [[ $flags =~ s ]] && o_dynamic+="--$o_sort[1]=$o_sort[3]"
                [[ $flags =~ S ]] && o_dynamic+="--$o_sort[1]=$o_sort[2]"
                [[ $flags =~ o ]] && o_dynamic+="--max-count=1"
                [[ $flags =~ O ]] && while ((idx=$o_dynamic[(I)--max-count*])); do unset "o_dynamic[idx]"; done
                [[ $flags =~ g ]] && {
                    if git rev-parse --is-inside-work-tree; then 
                        Search_dirs+="$(git rev-parse --show-toplevel)"
                    else
                        print_msg warn "$PWD is not a valid repository"
                    fi
                }
                [[ $flags =~ '\d+' ]] && { ((MATCH)) && o_dynamic+="--max-depth=$MATCH" || o_dynamic+="--max-depth=99" }
            }
            [[ -n $types ]] && if [[ $flags =~ e ]]; then 
                o_iglobs+=( '--iglob=*.'${^${(s/,/)types}} )
            else
                o_types+=( --type=${^${(s/,/)types}} )
            fi
            continue
        }
        
        { (($+o_custom[query])) || [[ -n $Pattern ]] } || {
            Pattern=$item
            continue
        }
        
        print_msg error "$item error, pattern is exists"
    done
}

__handle_result() {
    local trigger_key file_path line_number
    trigger_key=${"${(@f)Results}"[1]}
    file_path=${Results[(f)-1][(ws/:/)1]}
    line_number=${(q)Results[(f)-1][(ws/:/)2]}
    
    if [[ "alt-enter" == $trigger_key ]]; then
        $EDITOR ${file_path:h} > /dev/tty < /dev/tty
    else
        $EDITOR $file_path +$line_number > /dev/tty < /dev/tty
    fi
}

main() {
    local o_types=() o_dynamic=() o_iglobs=() o_args=() o_sort=() 
    local -A o_custom=()
    
    zparseopts -D -E -F -A zopts -- \
        t: T: g: \
        H I d: m: -sort: \
        -help -args: \
        -split -alias -popup \
        -query: -warm  -root-dir: -border-lines: \
        -style: || exit 1

    (($+zopts[-t]))                     && o_types+=( --type=${^${(s/,/)^zopts[-t]}} )
    (($+zopts[-T]))                     && o_types+=( --type-not=${^${(s/,/)^zopts[-T]}} )
    (($+zopts[-g]))                     && o_iglobs+=( --iglob=${^${(s/,/)zopts[-g]}} )
    
    (($+zopts[-H]))                     && o_dynamic+="--hidden"
    (($+zopts[-I]))                     && o_dynamic+="--no-ignore"
    (($+zopts[-d]))                     && o_dynamic+="--max-depth=$zopts[-d]"
    (($+zopts[-m]))                     && o_dynamic+="--max-count=$zopts[-m]"
    (($+zopts[--sort]))                 && { o_sort=( ${(s/:/)zopts[--sort]} ); o_dynamic+="--$o_sort[1]=$o_sort[2]" }
    
    (($+zopts[--args]))                 && o_args+=( "${(@)=zopts[--args]}" )
    (($+zopts[--help]))                 && __help

    (($+zopts[--split]))                && o_custom[split]=
    (($+zopts[--alias]))                && o_custom[alias]=
    
    (($+zopts[--warm]))                 && o_custom[warm]=
    (($+zopts[--popup]))                && o_custom[popup]=
    (($+zopts[--root-dir]))             && o_custom["root-dir"]=$zopts[--root-dir]
    (($+zopts[--border-lines]))         && o_custom["border-lines"]=$zopts[--border-lines]
    (($+zopts[--query]))                && o_custom[query]=$zopts[--query]
    (($+zopts[--style]))                && o_custom[style]=$zopts[--style]

    local file_rg file_fzf file_reload file_childid
    local Search_paths=() Search_dirs=() Pattern Results Root_dir
    local rmidx fopts cmd exitcode  
    local change_preview change_reload toggle_search initial_search
    
    rmidx=${@[(i)--]}
    ((rmidx < $#)) && o_args+=( "${@:$((rmidx+1))}" )
    ((rmidx > 1))  && __split "${@:1:$((rmidx-1))}"

    file_rg=${TMP_DIR:-${TMP:-/tmp}}/fzf-rg-$$
    file_fzf=${TMP_DIR:-${TMP:-/tmp}}/fzf-fzf-$$
    file_reload=${TMP_DIR:-${TMP:-/tmp}}/fzf-reload-$$
    file_childid=${TMP_DIR:-${TMP:-/tmp}}/fzf-childid-$$
    trap "command rm -f $file_rg $file_fzf $file_reload" EXIT SIGINT SIGTERM

    if (($+o_custom["root-dir"])); then
        Root_dir=$o_custom["root-dir"]
        (($#Search_dirs == 0)) && Search_paths+=$Root_dir 
    elif [[ $#Search_dirs == 1 && $Search_dirs[1] == /* ]]; then
        Root_dir=$Search_dirs[1]
    elif [[ -z ${(M)Search_dirs:#/*} ]]; then
        Root_dir=$PWD
    else
        Root_dir=
    fi

    cmd="command rg --line-number --with-filename --no-heading --color=always --smart-case $o_args"
    
    change_reload="
    setopt EXTENDED_GLOB
    setopt REMATCHPCRE
    local dynamic=( ${(@qq)o_dynamic} ) types=( ${(@qq)o_types} ) iglobs=( ${(@qq)o_iglobs} ) search_paths=()
    local prefix_string suffix_string reload_string 

    if [[ \$FZF_QUERY == *--* ]]; then
        prefix_string=\${FZF_QUERY%--*}
        suffix_string=\${FZF_QUERY##*--}
    else
        prefix_string=\${FZF_QUERY}
    fi
    prefix_string=\${prefix_string%%[[:blank:]]#}
    ((${o_custom[style][(Iws/,/)ltrim]}))              && prefix_string=\${prefix_string##[[:blank:]]#} 
    ((${o_custom[style][(Iws/,/)space-trigger]}))      && suffix_string=\${suffix_string%%[^[:blank:]]#}

    # parse suffix_string
    local item idx flags ltypes
    for item in \${=suffix_string}; do 
        if [[ \$item =~ '/$' ]]; then
            if [[ \$item == /* || -z $Root_dir ]]; then 
                search_paths+=\$item
            else
                if [[ $Root_dir == $PWD ]]; then
                    search_paths+=\$item
                else
                    search_paths+=$Root_dir/\$item
                fi
            fi
        elif [[ \$item =~ '^([hHiIsSoOge[:digit:]]+)?,+((?:[^,]+)(?:,+[^,]+)*)?,*$' ]]; then 
            flags=\$match[1] ltypes=\$match[2]
            
            [[ \$flags =~ H ]] && dynamic+='--hidden'
            [[ \$flags =~ h ]] && dynamic+='--no-hidden'
            [[ \$flags =~ I ]] && dynamic+='--no-ignore'
            [[ \$flags =~ i ]] && dynamic+='--ignore'
            [[ \$flags =~ s ]] && dynamic+='--$o_sort[1]=$o_sort[3]'
            [[ \$flags =~ S ]] && dynamic+='--$o_sort[1]=$o_sort[2]'
            [[ \$flags =~ o ]] && dynamic+='--max-count=1'
            [[ \$flags =~ O ]] && while ((idx=\$dynamic[(I)--max-count*])); do unset 'o_dynamic[idx]'; done
            [[ \$flags =~ [[:digit:]]+ ]] && { ((MATCH)) && dynamic+=--max-depth=\$MATCH || dynamic+=--max-depth=99 }

            
            [[ -n \$ltypes ]] && if [[ \$flags =~ e ]]; then 
                iglobs+=( '--iglob=*.'\${^\${(s/,/)ltypes}} )
            else
                types+=( --type=\${^\${(s/,/)ltypes}} )
            fi
            
        else
            iglobs+=--iglob=\$item
        fi
    done
    
    ((\$#search_paths)) || search_paths=( ${(@qq)Search_paths} )
    [[ -e $file_reload ]] || touch $file_reload
    
    reload_string=\\\"reload($cmd \${(@qqu)dynamic} \${(@qqu)types} \${(@qqu)iglobs} -- '\$prefix_string' \${(@qq)search_paths} || true )\\\"

    if [[ -z \{q} ]] && ! ((${o_custom[style][(Iws/,/)init-query]})); then
        print -r -- \\\"reload(:)\\\"
    elif [[ \$reload_string == \$(<$file_reload) ]]; then 
        print -r -- \\\"ignore\\\"
    else
        [[ -s $file_childid ]] && { kill \$(<$file_childid) &> /dev/null; echo -n > $file_childid }
        print -r -- \$reload_string | tee $file_reload
    fi
    "
    
    change_preview="
    local lines=\$((FZF_LINES - ${o_custom['border-lines']:-3}))  match_count=\$FZF_MATCH_COUNT preview_lines=\$FZF_PREVIEW_LINES
    typeset b1=10000 b2=1000 b3=100 per1=0 per2=30 per3=60 result
    
    if ((match_count == 0 || match_count > b1)); then
        result=0
    elif ((match_count > b2)); then
        result=\$(( ((b1 - match_count) * (per2 - per1) / (b1 - b2)  + per1) * lines / 100 ))
    elif ((match_count > b3)); then
        result=\$(( ((b2 - match_count) * (per3 - per2) / (b2 - b3)  + per2) * lines / 100 ))
    elif ((match_count > (100 - per3) * lines / 100)); then
        result=\$(( per3 * lines / 100 ))
    else
        result=$\((lines - match_count))
    fi

    print \\\"change-preview-window(\$result)\\\"
    "

    toggle_search="
    if [[ ! \$FZF_PROMPT =~ Rg ]]; then
        print \\\"rebind(change)+change-prompt(Rg> )+disable-search+transform-query:print -r \\\{q} > $file_fzf; cat $file_rg\\\"
    else
        print \\\"unbind(change)+change-prompt(Fzf> )+enable-search+transform-query:print -r \\\{q} > $file_rg; cat $file_fzf\\\"
    fi
    "

    initial_search="
    if [[ -n \{q} ]]; then
        print -r -- \\\"reload($cmd ${(@qqu)o_dynamic} ${(@qqu)o_types} ${(@qqu)o_iglobs} -- \\\{q} ${(@qq)Search_paths} )\\\"
    else
        if (($+o_custom[warm])); then
            local random_str=\$(cat /dev/urandom | tr -cd '[:lower:]' | head -c 4)
            print -r -- \\\"execute-silent:$cmd ${(@qqu)o_dynamic} ${(@qqu)o_types} ${(@qqu)o_iglobs} -- \$random_str ${(@qq)Search_paths} &; print \\\\\$! > $file_childid\\\"
        else
            print -r -- \\\"ignore\\\"
        fi
    fi
    "

    fopts="
    $FZF_DEFAULT_OPTS
    --layout=reverse-list --disabled +m
    --query '$Pattern'
    --prompt \"Rg> \"
    --exact
    --bind \"start:transform:$initial_search\"
    --bind \"change:transform:$change_reload\"
    --bind \"result:transform:$change_preview\"
    --bind \"resize:transform:$change_preview\"
    --bind \"ctrl-g:transform:$toggle_search\"
    --delimiter :
    --header-first --header=\"keybindings:: A-e, A-enter | pattern:: HhIiOoSse<->,cc,cpp dir/ iglob\"
    --preview-window \"up:~1,+{2}/2:border-down\"
    --preview 'bat --style=numbers,header,changes,snip --color=always --highlight-line {2} -- {1}'
    --expect \"alt-enter\"
    --bind=\"alt-e:execute(${EDITOR} {1} +{2} > /dev/tty < /dev/tty)\"
    --bind=\"alt-enter:accept,enter:accept\"
    $FZF_CUSTOM_OPTS
    "
    
    Results=$(: | FZF_DEFAULT_OPTS="$fopts" startup_fzf ${+o_custom[popup]+--popup})

    if ((exitcode == 1)); then print_msg warn  "not search any files";
    elif ((exitcode == 2)); then print_msg warn "not match any files";
    elif ((exitcode == 130)); then :;
    else __handle_result;fi
    
    return $exitcode
}
main "$@"
