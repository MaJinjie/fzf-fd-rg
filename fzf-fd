#!/bin/env zsh

setopt EXTENDED_GLOB
setopt REMATCHPCRE
setopt KSHGLOB

INSTALL_PATH=${${(M)${(%):-%N}:#/*}:-${0:A}}

function print_msg () { ${INSTALL_PATH:h}/functions/print_msg "$@" }

function startup_fzf() {
    if [[ $1 == --popup ]] && (($+commands[fzf-tmux])); then
        fzf-tmux $FZF_TMUX_OPTS "${@:2}" <&0
    else
        fzf "$@"
    fi
}

help() {
    local help_msg='\nusage: ff [OPTIONS] [DIRECTORIES or Files]

    OPTIONS:
        -g glob-based search
        -p full-path
        -t char set, file types dfxlspebc (-t t...)
        -d int, max-depth
        -H bool, --hidden
        -I bool, --no-ignore
        -e extensions, Comma-separated
        --args pass -> fd

        -q | --query force initial query string
        --popup start fzf-tmux
        --root-dir relative path -> abs dir
        --split Explain the parameters passed in by the user as much as possible, HhIig,exts
        --alias use directory alias
        
        --help 

    KEYBINDINGS:
        alt-e subshell editor
        alt-enter open dirname file
        enter current open file
    '
    print_msg help "$help_msg"
    exit 0
}

parse_cmdline() {
    local item 

    for item in "$@"; do 
        { [[ $item == /* && -e $item ]] || [[ -e $Root_dir/$item ]] } && {
            [[ $item != /* ]] && item=$Root_dir/$item
            [[ -d $item ]] && Search_dirs+=$item || Search_files+=$item
            continue
        }

        { (($+extend_opts[--alias])) && [[ $item == (#b):(*): ]] } && {
            item=${${(f)"$(rualdi list-alias)"}[(r)$match[1] => *]#* => }
            if [[ -n $item ]]; then
                Root_dir=$item
            else 
                print_msg error "directory mark is not exist" > /dev/tty
                exit 2
            fi
            continue
        }

        { (($+extend_opts[--split])) && [[ $item == (#b)?(<->[smhdwMy]),?(<->[smhdwMy]) ]] } && {
            [[ -n $match[1] ]] && dynamic_opts[--changed-after]=$match[1]
            [[ -n $match[2] ]] && dynamic_opts[--changed-before]=$match[2]
            continue
        }

        { (($+extend_opts[--split])) && [[ $item =~ '^([dfxlspebchHiIg\d]+)?,+((?:[^,]+)(?:,+[^,]+)*)?,*$' ]] } && {
            local flags=$match[1] extensions=$match[2]
        
            [[ -n $flags ]] && {
                [[ $flags =~ h ]] && unset 'dynamic_opts[--hidden]'
                [[ $flags =~ H ]] && dynamic_opts[--hidden]=
                [[ $flags =~ i ]] && unset 'dynamic_opts[--no-ignore]'
                [[ $flags =~ I ]] && dynamic_opts[--no-ignore]=
                [[ $flags =~ g ]] && {
                    if git rev-parse --is-inside-work-tree; then 
                        Root_dir="$(git rev-parse --show-toplevel)"
                    else
                        print_msg error "$PWD is not a valid repository"
                        exit 2
                    fi
                }
                [[ $flags =~ '\d+' ]] && { ((MATCH)) && dynamic_opts[--max-depth]=$MATCH || unset 'dynamic_opts[--max-depth]' }
                
                extend_opts[--type]+=${flags//[hHiIg[:digit:]]}
            }

            [[ -n $extensions ]] && extend_opts[--extensions]+=,$extensions
            continue
        }
        
        { (($+extend_opts[-q])) || [[ -n $Pattern ]] } || {
            Pattern=$item
            continue
        }
        
        print_msg error "$item error, pattern is exists"
    done
}

handler() {
    local trigger_key files
    trigger_key=${"${(@f)Results}"[1]}
    files=(${"${(@f)Results}"[2,-1]})
    
    if [[ "alt-enter" == $trigger_key ]]; then
        $EDITOR ${files[-1]:h} > /dev/tty < /dev/tty
    else
        $EDITOR $files > /dev/tty < /dev/tty
    fi
}

main() {
    local static_opts=()
    local -A zopts extend_opts dynamic_opts

    local Search_dirs=() Search_files=() Results Pattern Root_dir=$PWD
    local rmidx fopts cmd exitcode
    
    zparseopts -D -E -F -A zopts -- \
        g p t: d: H I e: \
        -args: -help \
        -root-dir: r q: \
        -popup -split -alias -output || exit 1
    
    (($+zopts[--help]))     && help

    (($+zopts[-g]))         && static_opts+="--glob"
    (($+zopts[-p]))         && static_opts+="--full-path"
    (($+zopts[--args]))     && static_opts+=( ${=zopts[--args]} )    
    
    (($+zopts[-H]))         && dynamic_opts[--hidden]=
    (($+zopts[-I]))         && dynamic_opts[--no-ignore]=
    (($+zopts[-d]))         && dynamic_opts[--max-depth]=$zopts[-d]
    
    (($+zopts[-t]))         && extend_opts[--type]=$zopts[-t]
    (($+zopts[-e]))         && extend_opts[--extensions]=$zopts[-e]
    (($+zopts[--split]))    && extend_opts[--split]=
    (($+zopts[--popup]))    && extend_opts[--popup]=
    (($+zopts[--alias]))    && extend_opts[--alias]=
    (($+zopts[--output]))    && extend_opts[--output]=

    (($+zopts[-q]))         && Pattern=$zopts[-q]
    (($+zopts[-r]))         && Root_dir=$zopts[-r]
    (($+zopts[--root-dir])) && Root_dir=$zopts[--root-dir]

    rmidx=${@[(i)--]}
    ((rmidx < $#)) && static_opts+=( "${@:$((rmidx+1))}" )
    ((rmidx > 1))  && parse_cmdline "${@:1:$((rmidx-1))}"

    # regular paths
    (($#Search_dirs == 0 && $#Search_files == 0)) && Search_dirs+=$Root_dir
    Search_files=( ${${Search_files/#$PWD\/}} )
    Search_dirs=( ${${Search_dirs/#$PWD(\/|(#e))}:#} )
    
    cmd="command fd --color=always --follow ${(@qq)static_opts} ${(kv)dynamic_opts}"

    fopts="
    $FZF_DEFAULT_OPTS
    --prompt 'Files> '
    --exit-0
    --delimiter / --nth -1,-2
    --header-first --header=\"Keybindings:: enter, A-e, A-enter\"
    --expect \"alt-enter\"
    --bind=\"alt-e:execute(${EDITOR} {+} > /dev/tty < /dev/tty)\"
    --bind=\"alt-enter:accept,enter:accept\"
    $FZF_CUSTOM_OPTS
    "
    
    Results=$( 
    { 
        (($#Search_files)) && lscolors < <( for item in $Search_files; do [[ $item =~ $Pattern ]] && print $item; done )
        (($#Search_dirs || $#Search_files == 0)) && eval $cmd --type=${(s//)^extend_opts[--type]:-f} \
            ${+extend_opts[--extensions]+"--extension=${(s/,/)^extend_opts[--extensions]}"}  ${(qq)Pattern:-'^'} ${(@qq)Search_dirs}
    } | FZF_DEFAULT_OPTS="$fopts" startup_fzf ${+extend_opts[--popup]+--popup} )
    exitcode=$?
    
    if ((exitcode == 1)); then print_msg warn  "(cmd:$cmd | pattern:$Pattern)not search any files";
    elif ((exitcode == 2)); then print_msg warn "(cmd:$cmd | pattern:$Pattern) not match files";
    elif ((exitcode == 130)); then ;
    elif (($+extend_opts[--output])); then sed -n '1!p' <<<$Results ;
    else handler;fi

    return $exitcode
}
main "$@"
