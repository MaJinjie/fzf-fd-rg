#!/bin/env zsh

setopt EXTENDED_GLOB
setopt REMATCHPCRE
setopt KSHGLOB

0=${${(M)${(%):-%N}:#/*}:-$PWD/$0}

function print_msg () {
    ${0:h}/functions/print_msg "$@"
}

function startup_fzf() {
    if [[ $1 == --popup ]] && (($+commands[fzf-tmux])); then
        fzf-tmux $FZF_TMUX_OPTS "${@:2}" <&0
    else
        fzf "$@"
    fi
}

__help() {
    local help_msg='\nusage: ff [OPTIONS] [DIRECTORIES or Files]

    OPTIONS:
        -g glob-based search
        -p full-path
        -t char set, file types dfxlspebc (-t t...)
        -d int, max-depth
        -H bool, --hidden
        -I bool, --no-ignore
        -e extensions, Comma-separated
        --args pass -> fd

        --query force initial query string
        --popup start fzf-tmux
        --root-dir relative path -> abs dir
        --split Explain the parameters passed in by the user as much as possible, HhIig,exts
        --alias use directory alias
        
        --help 

    KEYBINDINGS:
        alt-e subshell editor
        alt-enter open dirname file
        enter current open file
    '
    print_msg help "$help_msg"
    exit 0
}

__split() {
    local item 

    for item in "$@"; do 
        { [[ -z $Root_dir && -e $item ]] || [[ -n $Root_dir && -e $Root_dir/$item ]] } && {
            [[ -n $Root_dir ]] && item=$Root_dir/$item
            [[ -d $item ]] && Search_dirs+=$item || Search_files+=$item
            continue
        }

        { (($+o_custom[alias])) && [[ $item == (#b):(*): ]] } && {
            item=${${(f)"$(rualdi list-alias)"}[(r)$match[1] => *]#* => }
            if [[ -n $item ]]; then
                Root_dir=$item
            else 
                print_msg warn "directory mark is not exist" > /dev/tty
            fi
            continue
        }

        { (($+o_custom[split])) && [[ $item == (#b)?(<->[smhdwMy]),?(<->[smhdwMy]) ]] } && {
            [[ -n $match[1] ]] && o_dynamic+="--changed-after=$match[1]"
            [[ -n $match[2] ]] && o_dynamic+="--changed-before=$match[2]"
            continue
        }

        { (($+o_custom[split])) && [[ $item =~ '^([dfxlspebchHiIg\d]+)?,+((?:[^,]+)(?:,+[^,]+)*)?,*$' ]] } && {
            local flags=$match[1] extensions=$match[2]
        
            [[ $flags =~ h ]] && o_dynamic+="--no-hidden"
            [[ $flags =~ H ]] && o_dynamic+="--hidden"
            [[ $flags =~ i ]] && o_dynamic+="--ignore"
            [[ $flags =~ I ]] && o_dynamic+="--no-ignore"
            [[ $flags =~ g ]] && {
                if git rev-parse --is-inside-work-tree; then 
                    Root_dir="$(git rev-parse --show-toplevel)"
                else
                    print_msg warn "$PWD is not a valid repository"
                fi
            }
            [[ $flags =~ '\d+' ]] && { ((MATCH)) && o_dynamic+="--max-depth=$MATCH" || o_dynamic+="--max-depth=99" }
            
            o_types+=${flags//[hHiIg[:digit:]]}

            [[ -n $extensions ]] && o_extensions+=( ${(s/,/)extensions} )
            continue
        }
        
        { (($+o_custom[query])) || [[ -n $Pattern ]] } || {
            Pattern=$item
            continue
        }
        
        print_msg error "$item error, pattern is exists"
    done
}

__handle_result() {
    local trigger_key files
    trigger_key=${"${(@f)Results}"[1]}
    files=(${"${(@f)Results}"[2,-1]})
    
    if [[ "alt-enter" == $trigger_key ]]; then
        $EDITOR ${files[-1]:h} > /dev/tty < /dev/tty
    else
        $EDITOR $files > /dev/tty < /dev/tty
    fi
}

main() {
    local o_dynamic=() o_types o_extensions=() o_args=()
    local -A o_custom

    local Search_dirs=() Search_files=() Root_dir Pattern Results
    local rmidx fopts cmd exitcode
    
    zparseopts -D -E -F -A zopts -- \
        g p t: d: H I e: \
        -args: -help \
        -root-dir: -query: \
        -popup -split -alias || exit 1

    (($+zopts[-g]))         && o_args+="--glob"
    (($+zopts[-p]))         && o_args+="--full-path"
    (($+zopts[--args]))     && o_args+=( ${=zopts[--args]} )    
    
    (($+zopts[-H]))         && o_dynamic+="--hidden"
    (($+zopts[-I]))         && o_dynamic+="--no-ignore"
    (($+zopts[-d]))         && o_dynamic+="--max-depth=$zopts[-d]"
    
    (($+zopts[-t]))         && o_types=$zopts[-t]
    (($+zopts[-e]))         && o_extensions+=( ${(s/,/)zopts[-e]} )

    (($+zopts[--split]))    && o_custom[split]=
    (($+zopts[--popup]))    && o_custom[popup]=
    (($+zopts[--alias]))    && o_custom[alias]=
    
    (($+zopts[--help]))     && __help

    (($+zopts[--query]))    && Pattern=$zopts[--query]
    (($+zopts[--root-dir])) && Root_dir=$zopts[--root-dir]

    rmidx=${@[(i)--]}
    ((rmidx < $#)) && o_args+=( "${@:$((rmidx+1))}" )
    ((rmidx > 1))  && __split "${@:1:$((rmidx-1))}"

    { ! (($#Search_dirs)) && [[ -n $Root_dir ]] } && Search_dirs+=$Root_dir
    
    cmd="command fd --color=always --follow $o_args $o_dynamic "

    fopts="
    $FZF_DEFAULT_OPTS
    --prompt 'Files> '
    --exit-0
    --scheme path --exact --tiebreak \"length,end,chunk,index\"
    --delimiter / --nth -1,-2
    --header-first --header=\"Keybindings:: enter, A-e, A-enter\"
    --expect \"alt-enter\"
    --bind=\"alt-e:execute(${EDITOR} {+} > /dev/tty < /dev/tty)\"
    --bind=\"alt-enter:accept,enter:accept\"
    $FZF_CUSTOM_OPTS
    "
    
    Results=$( 
    { 
        (($#Search_files)) && lscolors < <( for item in $Search_files; do [[ $item =~ $Pattern ]] && print $item; done )
        (($#Search_dirs || $#Search_files == 0)) && eval $cmd --type=${(s//)^o_types:-f} --extension=${^o_extensions}  ${(qq)Pattern:-\^} ${(@qq)Search_dirs}
    } | FZF_DEFAULT_OPTS="$fopts" startup_fzf ${+o_custom[popup]+--popup} )
    exitcode=$?
    
    if ((exitcode == 1)); then print_msg warn  "($cmd)not search any files";
    elif ((exitcode == 2)); then print_msg warn "($cmd)not match files";
    elif ((exitcode == 130)); then ;
    else __handle_result;fi

    return $exitcode
}
main "$@"
