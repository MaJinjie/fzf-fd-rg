#!/bin/env zsh

setopt EXTENDED_GLOB
setopt REMATCHPCRE

INSTALL_PATH=${${(M)${(%):-%N}:#/*}:-${0:A}}

function print_msg () { ${INSTALL_PATH:h}/functions/print_msg "$@" }

function startup_fzf() {
    if [[ $1 == --popup ]] && (($+commands[fzf-tmux])); then
        fzf-tmux $FZF_TMUX_OPTS "${@:2}"
    else
        fzf "$@"
    fi
}

help() {
    local help_msg='\nusage: ss [OPTIONS] [pattern] [DIRECTORIES or Files]

    OPTIONS:
        -t file types,  Comma-separated
        -g iglob pattern,  Comma-separated
        
        -H bool --hidden
        -I bool --no-ignorehas 
        -d int max-depth
        -m --max-count 
        --sort format (sort|sortr):default:toggle_val
        --args pass -> rg

        -q force initial query string
        --warm warm-cache when initial querystring is empty
        --popup start fzf-tmux
        --split Explain the parameters passed in by the user as much as possible
        --alias use directory alias

        --root-dir | -r filter base dir
        --help 
    KEYBINDINGS:
        alt-e subshell editor
        alt-enter open dirname file
        enter current open file
    '
    print_msg help "$help_msg"
    exit 0
}

parse_cmdline() {
    local item
    for item in "$@"; do 
        { [[ $item == /* && -e $item ]] || [[ -e $Root_dir/$item ]] } && {
            [[ $item != /* ]] && item=$Root_dir/$item
            Search_paths+=$item
            continue
        }
        
        { (($+extend_opts[--alias])) && [[ $item == (#b):(*): ]] } && {
            item=${${(f)"$(rualdi list-alias)"}[(r)$match[1] => *]#* => }
            if [[ -n $item ]]; then
                Root_dir=$item
            else 
                print_msg error "directory mark is not exist" > /dev/tty
                exit 2
            fi
            continue
        }
        
        { (($+extend_opts[--split])) && [[ $item =~ '^([hHiIsSoOg\d]+)?,+((?:\w+)(?:,+\w+)*)?,*$' ]] } && {
            local flags=$match[1] types=$match[2]
            [[ -n $flags ]] && {
                [[ $flags =~ H ]] && unset 'dynamic_opts[--hidden]'
                [[ $flags =~ h ]] && dynamic_opts[--hidden]=
                [[ $flags =~ I ]] && unset 'dynamic_opts[--no-ignore]'
                [[ $flags =~ i ]] && dynamic_opts[--no-ignore]=
                [[ $flags =~ S ]] && dynamic_opts[--${sort[1]}]=$sort[2]
                [[ $flags =~ s ]] && dynamic_opts[--${sort[1]}]=$sort[3]
                [[ $flags =~ O ]] && unset 'dynamic_opts[--max-count]'
                [[ $flags =~ o ]] && dynamic_opts[--max-count]=1
                [[ $flags =~ g ]] && {
                    if git rev-parse --is-inside-work-tree; then 
                        Root_dir="$(git rev-parse --show-toplevel)"
                    else
                        print_msg error "$PWD is not a valid repository"
                        exit 2
                    fi
                }
                [[ $flags =~ '\d+' ]] && { ((MATCH)) && dynamic_opts[--max-depth]=$MATCH || unset 'dynamic_opts[--max-depth]' }
            }
            [[ -n $types ]] && type+=( ${(s/,/)types} )
            continue
        }
        
        { (($+extend_opts[-q])) || [[ -n $Pattern ]] } || {
            Pattern=$item
            continue
        }
        
        print_msg error "$item error, pattern is exists"
    done
}

__handle_result() {
    local trigger_key file_path line_number
    trigger_key=${"${(@f)Results}"[1]}
    file_path=${Results[(f)-1][(ws/:/)1]}
    line_number=${(q)Results[(f)-1][(ws/:/)2]}
    
    if [[ "alt-enter" == $trigger_key ]]; then
        $EDITOR ${file_path:h} > /dev/tty < /dev/tty
    else
        $EDITOR $file_path +$line_number > /dev/tty < /dev/tty
    fi
}

main() {
    local static_opts=() iglob=() type=() sort=(sortr none modified)
    local -A zopts extend_opts dynamic_opts

    local file_rg file_fzf file_reload file_childid
    local Search_paths=() Results Pattern Root_dir=$PWD
    local rmidx fopts cmd exitcode  
    local change_preview change_reload toggle_search initial_search

    zparseopts -D -E -F -A zopts -- \
        t: g: \
        H I d: m: -sort: \
        -help -args: \
        -split -alias -popup -warm \
        q -root-dir: r \
        || exit 1

    (($+zopts[--help]))                 && help
    
    (($+zopts[--args]))                 && static_opts+=( ${=zopts[--args]} )    
    
    (($+zopts[-H]))                     && dynamic_opts[--hidden]=
    (($+zopts[-I]))                     && dynamic_opts[--no-ignore]=
    (($+zopts[-d]))                     && dynamic_opts[--max-depth]=$zopts[-d]
    (($+zopts[-m]))                     && dynamic_opts[--max-count]=$zopts[-m]
    (($+zopts[--sort]))                 && sort=( ${(s/,/)zopts[--sort]} )

    (($+zopts[-t]))                     && type+=( ${(s/,/)zopts[-t]} )
    (($+zopts[-g]))                     && iglob+=( ${(s/,/)zopts[-g]} )
    (($+zopts[--split]))                && extend_opts[--split]=
    (($+zopts[--alias]))                && extend_opts[--alias]=
    (($+zopts[--warm]))                 && extend_opts[--warm]=
    (($+zopts[--popup]))                && extend_opts[--popup]=

    (($+zopts[-q]))                     && Pattern=$zopts[-q]
    (($+zopts[-r]))                     && Root_dir=$zopts[-r]
    (($+zopts[--root-dir]))             && Root_dir=$zopts[--root-dir]

    # default
    dynamic_opts[--${sort[1]}]=$sort[2]

    # split args
    rmidx=${@[(i)--]}
    ((rmidx < $#)) && static_opts+=( "${@:$((rmidx+1))}" )
    ((rmidx > 1))  && parse_cmdline "${@:1:$((rmidx-1))}"
    
    # regular paths
    (($#Search_paths == 0)) && Search_paths+=$Root_dir
    Search_paths=( ${${Search_paths/#$PWD(\/|(#e))}:#} )

    # file touch
    file_rg=${TMP_DIR:-${TMP:-/tmp}}/fzf-rg-$$
    file_fzf=${TMP_DIR:-${TMP:-/tmp}}/fzf-fzf-$$
    file_reload=${TMP_DIR:-${TMP:-/tmp}}/fzf-reload-$$
    file_childid=${TMP_DIR:-${TMP:-/tmp}}/fzf-childid-$$
    trap "command rm -f $file_rg $file_fzf $file_reload $file_childid" EXIT SIGINT SIGTERM

    # cmd 
    cmd="command rg --line-number --with-filename --no-heading --color=always --smart-case ${(@qq)static_opts}"

    initial_search="
    local warm file_childid cmd search_paths
    warm=${+extend_opts[--warm]} file_childid=$file_childid
    cmd=\\\"$cmd ${type:+--type=${(@)^type}} ${iglob:+--iglob=${(@qq)^iglob}}\\\" search_paths=( ${(@qq)Search_paths} )
    "'
    if [[ -n {q} ]]; then
        print -r -- \"reload($cmd -- \{q} ${(@qq)search_paths})\"
    else
        if ((warm)); then
            local random_str=$(cat /dev/urandom | tr -cd \"[:lower:]\" | head -c 4)
            print -r -- \"execute-silent:$cmd -- $random_str $search_paths &; print \\\$! > $file_childid\"
        else
            print -r -- \"ignore\"
        fi
    fi
    '
    
    toggle_search="
    local file_fzf=$file_fzf file_rg=$file_rg
    "'if [[ ! $FZF_PROMPT =~ Rg ]]; then
        print \"rebind(change)+change-prompt(Rg> )+disable-search+transform-query:print -r {q} > $file_fzf; cat $file_rg\"
    else
        print \"unbind(change)+change-prompt(Fzf> )+enable-search+transform-query:print -r {q} > $file_rg; cat $file_fzf\"
    fi
    '

    change_preview='
    local lines=$((FZF_LINES - 3))  match_count=$FZF_MATCH_COUNT preview_lines=$FZF_PREVIEW_LINES
    typeset b1=10000 b2=1000 b3=100 per1=0 per2=30 per3=60 result
    
    if ((match_count == 0 || match_count > b1)); then
        result=0
    elif ((match_count > b2)); then
        result=$(( ((b1 - match_count) * (per2 - per1) / (b1 - b2)  + per1) * lines / 100 ))
    elif ((match_count > b3)); then
        result=$(( ((b2 - match_count) * (per3 - per2) / (b2 - b3)  + per2) * lines / 100 ))
    elif ((match_count > (100 - per3) * lines / 100)); then
        result=$(( per3 * lines / 100 ))
    else
        result=$((lines - match_count))
    fi
    print -- \"change-preview-window($result)\"
    '

    change_reload="
    setopt EXTENDED_GLOB
    setopt REMATCHPCRE
    
    local -A dynamic_opts
    local cmd sort type iglob search_paths 
    local root_dir 
    local file_reload file_childid

    file_reload=$file_reload file_childid=$file_childid
    dynamic_opts=( ${(@qqkv)dynamic_opts} ) 
    cmd='$cmd' sort=( $sort ) type=( $type ) iglob=( ${(@qq)iglob} ) search_paths=( ${(@qq)Search_paths} )  
    root_dir=$Root_dir
    "'
    local prefix_string suffix_string fzf_array
    [[ {q} =~ ^(?:[[:blank:]]*(.*?)[[:blank:]]*)(?:-|--[[:blank:]]*(.*?)[^[:blank:]]*)?$ ]]
    prefix_string=$match[1] suffix_string=$match[2] fzf_array=( $prefix_string ${(ou)=suffix_string} )

    if [[ -z $prefix_string ]]; then
        print -r -- \"reload(:)\"
    elif [[ "$fzf_array" == "$(<$file_reload)" ]]; then
        print -r -- \"ignore\"
    else
        print -r -- "$fzf_array" > $file_reload
        
        local item flags types flag_path=1
        for item in ${(u)=suffix_string}; do
            if [[ $item == */ ]]; then
                ((flag_path)) && { flag_path=0; search_paths=() }
                [[ $item == /* || $root_dir == $PWD ]] && search_paths+=$item || search_paths+=$root_dir/$item
            elif [[ $item =~ ^([hHiIsSoO[:digit:]]+)?,+((?:[[:word:]]+)(?:,+[[:word:]]+)*)?,*$ ]]; then
                flags=$match[1] types=$match[2]
                [[ $flags =~ H ]] && unset \"dynamic_opts[--hidden]\"
                [[ $flags =~ h ]] && dynamic_opts[--hidden]=
                [[ $flags =~ I ]] && unset \"dynamic_opts[--no-ignore]\"
                [[ $flags =~ i ]] && dynamic_opts[--no-ignore]=
                [[ $flags =~ S ]] && dynamic_opts[--$sort[1]]=$sort[2]
                [[ $flags =~ s ]] && dynamic_opts[--$sort[1]]=$sort[3]
                [[ $flags =~ O ]] && unset \"dynamic_opts[--max-count]\"
                [[ $flags =~ o ]] && dynamic_opts[--max-count]=1
                [[ $flags =~ [[:digit:]]+ ]] && { ((MATCH)) && dynamic_opts[--max-depth]=$MATCH || unset \"dynamic_opts[--max-depth]\" }
                [[ -n $types ]] && type+=( ${(s/,/)types} )
            else
                iglob+=$item
            fi
        done

        # once
        [[ -s $file_childid ]] && {
            kill $(<$file_childid) &> /dev/null
            truncate --size 0 $file_childid
        }
        
        print -r -- \"reload($cmd ${(kv)dynamic_opts} ${type:+--type=${(@)^type}} ${iglob:+--iglob=${(@qq)^iglob}} -- ${(qq)prefix_string} ${(@qq)search_paths})\"
    fi
    '
    
    fopts="
    $FZF_DEFAULT_OPTS
    --layout=reverse-list --disabled +m
    --query '$Pattern'
    --prompt 'Rg> '
    --bind \"start:transform:$initial_search\"
    --bind \"ctrl-g:transform:$toggle_search\"
    --bind \"result:transform:$change_preview\"
    --bind \"resize:transform:$change_preview\"
    --bind \"change:transform:$change_reload\"
    --delimiter :
    --header-first --header=\"keybindings:: A-e, A-enter | pattern:: HhIiOoSs<->,cc,cpp dir/ iglob\"
    --preview-window \"up:~1,+{2}/2:border-down\"
    --preview 'bat --style=numbers,header,changes,snip --color=always --highlight-line {2} -- {1}'
    --expect \"alt-enter\"
    --bind=\"alt-e:execute(${EDITOR} {1} +{2} > /dev/tty < /dev/tty)\"
    --bind=\"alt-enter:accept,enter:accept\"
    $FZF_CUSTOM_OPTS
    "

    Results=$(: | FZF_DEFAULT_OPTS="$fopts" startup_fzf ${+extend_opts[--popup]+--popup})
    exitcode=$?

    if ((exitcode == 1)); then print_msg warn  "(cmd:$cmd | pattern:$Pattern)not search any files";
    elif ((exitcode == 2)); then print_msg warn "(cmd:$cmd | pattern:$Pattern) not match files";
    elif ((exitcode == 130)); then ;
    else __handle_result;fi
    
    return $exitcode
}
main "$@"
